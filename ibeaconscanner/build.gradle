apply plugin: 'com.android.library'
apply plugin: 'maven'

def envBuildNumber = System.getenv().get("BUILD_NUMBER");
if (envBuildNumber == null) {
    envBuildNumber = "1"
}

def fullVersion = projectVersion + "." + envBuildNumber;
def versionCodeNr = Integer.parseInt(projectVersionCode);
def libGroupId = libGroupId;
def libArtifactId = libArtifactId;

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 24
        versionCode versionCodeNr
        versionName fullVersion
        consumerProguardFiles 'proguard-rules.pro'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField 'long', 'BEACON_EXIT_TIME_IN_MILLIS', '20L * 1000L'
        buildConfigField 'long', 'ADD_REGION_TIMEOUT_IN_MILLIS', '375L'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    compile 'com.android.support:support-annotations:24.2.1'

    androidTestCompile 'com.android.support.test:runner:0.5'
    testCompile 'junit:junit:4.12'
}

configurations {
    deployerJars
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: 'https://nexus.itpservices.be/content/repositories/harald-release/') {
                authentication(userName: "${nexus_user}", password: "${nexus_password}")
            }
            snapshotRepository(url: 'https://nexus.itpservices.be/content/repositories/harald-snapshot/') {
                authentication(userName: "${nexus_user}", password: "${nexus_password}")
            }
            pom.version = projectVersion
            pom.artifactId = libArtifactId
            pom.groupId = libGroupId
        }
    }
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
